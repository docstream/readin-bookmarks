// Generated by CoffeeScript 1.8.0
var Bookmark, Schema, bookmarkSchema, mongoose, uniqueIndex, _;

mongoose = require('mongoose');

Schema = require('mongoose').Schema;

_ = require('underscore');

bookmarkSchema = Schema({
  domainName: {
    type: String,
    required: true
  },
  endUser: {
    type: Schema.Types.ObjectId,
    required: true
  },
  urlFragFree: {
    type: String,
    required: true
  },
  urlFrag: String,
  title: {
    type: String,
    required: true
  },
  created: {
    type: Date,
    "default": Date.now
  },
  deleted: {
    type: Boolean,
    "default": false
  }
});

uniqueIndex = {
  urlFragFree: 1,
  urlFragFree: 1,
  domainName: 1,
  endUser: 1
};

bookmarkSchema.index(uniqueIndex, {
  unique: true
});

bookmarkSchema.set('toObject', {
  virtuals: true
});

bookmarkSchema.virtual('encURI').get(function() {
  var encURI;
  encURI = encodeURIComponent("" + this.urlFragFree + "#" + this.urlFrag);
  return encURI;
});

bookmarkSchema.virtual('formatedCreatedDate').get(function() {
  var d, date, day, m, month;
  date = new Date(this.created);
  m = date.getMonth() + 1;
  month = m < 10 ? "0" + m : m;
  d = date.getDate();
  day = d < 10 ? "0" + d : d;
  return "" + (date.getFullYear()) + "-" + month + "-" + day;
});

bookmarkSchema.statics.create = function(data, cb) {
  var bookmark;
  bookmark = new Bookmark(data);
  return bookmark.save(function(err) {
    if (err) {
      return cb(err);
    } else {
      return cb(null, bookmark);
    }
  });
};

bookmarkSchema.statics.findSingle = function(params, cb) {
  var query;
  query = {
    endUser: params.endUser,
    _id: params._id,
    deleted: false
  };
  return this.findOne(query, cb);
};

bookmarkSchema.statics.trashSingle = function(params, cb) {
  var options, query, updateData;
  updateData = {
    deleted: true
  };
  query = {
    endUser: params.endUser,
    _id: params._id
  };
  options = {
    "new": true
  };
  return this.findOneAndUpdate(query, updateData, options, cb);
};

bookmarkSchema.statics.overview = function(params, cb) {
  var query;
  query = {
    endUser: params.endUser,
    domainName: params.domainName,
    urlFragFree: params.urlFragFree
  };
  return this.find(query, cb);
};

bookmarkSchema.statics.search = function(params, query, cb) {
  var absoluteMax, dbQuery, page, pageSize;
  dbQuery = {
    endUser: params.endUser,
    domainName: params.domainName,
    deleted: false
  };
  if (query.filter) {
    switch (query.filter) {
      case "deleted":
        dbQuery.deleted = true;
    }
  }
  if (query.page) {
    absoluteMax = 50;
    pageSize = query.max ? query.max : 10;
    if (pageSize > absoluteMax) {
      pageSize = absoluteMax;
    }
    page = query.page - 1;
    return this.where(dbQuery).count((function(_this) {
      return function(err, count) {
        if (err) {
          return cb(err);
        } else if (count === 0) {
          return cb(null, []);
        } else {
          return _this.find(dbQuery).skip(pageSize * page).limit(pageSize).sort({
            created: -1
          }).exec(function(err, bookmarks) {
            if (err) {
              return cb(err);
            } else {
              return cb(null, {
                totalCount: count,
                page: query.page,
                pageSize: pageSize,
                bookmarks: bookmarks
              });
            }
          });
        }
      };
    })(this));
  } else {
    return this.find(dbQuery).sort({
      created: -1
    }).exec(cb);
  }
};

Bookmark = null;

module.exports = function(conn) {
  Bookmark = conn.model('Bookmark', bookmarkSchema);
  return Bookmark;
};
