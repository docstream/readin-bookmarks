// Generated by CoffeeScript 1.8.0
var BookmarkService, MODID, mongoose, monitorConn, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

mongoose = require('mongoose');

_ = require('underscore');

MODID = "BOOKMARK";

BookmarkService = (function() {
  var Bookmark, appendSearchData;

  Bookmark = null;

  function BookmarkService(url) {
    this.myRecords = __bind(this.myRecords, this);
    this.conn = mongoose.createConnection(url);
    monitorConn(this.conn);
    Bookmark = require('./model/bookmark-model')(this.conn);
    this.viewHelpers = [
      {
        name: 'myBookmarks',
        fn: this.myRecords
      }
    ];
  }

  BookmarkService.prototype.close = function() {
    return this.conn.close();
  };

  BookmarkService.prototype.myRecords = function(options, cb) {
    var params, query;
    query = {
      page: options.page,
      max: options.max
    };
    params = {
      endUser: options.userId,
      domainName: options.domainName
    };
    return Bookmark.search(params, query, (function(_this) {
      return function(err, result) {
        var bookmarks, embedParams;
        if (err) {
          return cb(err);
        } else {
          bookmarks = query.page ? result.bookmarks : result;
          embedParams = {
            paging: (query.page ? true : false),
            totalCount: result.totalCount,
            page: result.page,
            pageSize: result.pageSize,
            filter: query.filter ? query.filter : ""
          };
          return cb(null, appendSearchData(bookmarks, embedParams));
        }
      };
    })(this));
  };

  BookmarkService.prototype.create = function(data, params, cbHash) {
    var bookmarkData;
    bookmarkData = data;
    bookmarkData.endUser = params.userId;
    return Bookmark.create(bookmarkData, function(err, bookmark) {
      if (err) {
        return cbHash.MODEL_ERR(err);
      } else {
        return cbHash.DEFAULT({
          data: bookmark.toObject()
        });
      }
    });
  };

  BookmarkService.prototype.findSingle = function(id, userId, cbHash) {
    var params;
    params = {
      endUser: userId,
      _id: id
    };
    return Bookmark.findSingle(params, function(err, bookmark) {
      if (err) {
        return cbHash.MODEL_ERR(err);
      } else if (bookmark === null) {
        return cbHash.NOT_FOUND();
      } else {
        return cbHash.DEFAULT({
          data: bookmark.toObject()
        });
      }
    });
  };

  BookmarkService.prototype["delete"] = function(id, userId, cbHash) {
    var query;
    query = {
      _id: id,
      endUser: userId
    };
    return Bookmark.findOne(query, function(err, bookmark) {
      if (err) {
        return cbHash.MODEL_ERR(err);
      } else if (bookmark === null) {
        return cbHash.NOT_FOUND();
      } else {
        return bookmark.remove(function(err) {
          if (err) {
            return cbHash.MODEL_ERR(err);
          } else {
            return cbHash.DELETED();
          }
        });
      }
    });
  };

  BookmarkService.prototype.deleteUser = function(userId, domainName, cbHash) {
    var query;
    query = {
      endUser: userId,
      domainName: domainName
    };
    return Bookmark.remove(query, function(err) {
      if (err) {
        return cbHash.MODEL_ERR(err);
      } else {
        return cbHash.DELETED();
      }
    });
  };

  BookmarkService.prototype.overview = function(encHref, params, cbHash) {
    var modParams;
    modParams = {
      urlFragFree: decodeURIComponent(encHref),
      endUser: params.userId.toString(),
      domainName: params.domainName
    };
    return Bookmark.overview(modParams, function(err, result) {
      var cleanedResult, totalCount;
      if (err) {
        return cbHash.MODEL_ERR(err);
      } else {
        totalCount = 0;
        cleanedResult = {};
        _.each(result, function(row) {
          console.log('row ', row);
          totalCount += row.count;
          return cleanedResult[row._id] = {
            fragmIdentUrl: '#' + row._id,
            count: row.count
          };
        });
        return cbHash.DEFAULT({
          data: {
            totalCount: totalCount
          },
          embeds: {
            ids: cleanedResult
          }
        });
      }
    });
  };

  BookmarkService.prototype.search = function(query, params, cbHash) {
    params = {
      endUser: params.userId,
      domainName: params.domainName
    };
    return Bookmark.search(params, query, (function(_this) {
      return function(err, result) {
        var bookmarks, embedParams;
        if (err) {
          return cbHash.MODEL_ERR(err);
        } else {
          bookmarks = query.page ? result.bookmarks : result;
          embedParams = {
            paging: (query.page ? true : false),
            totalCount: result.totalCount,
            page: result.page,
            pageSize: result.pageSize,
            filter: query.filter ? query.filter : ""
          };
          return cbHash.DEFAULT(appendSearchData(bookmarks, embedParams));
        }
      };
    })(this));
  };

  appendSearchData = function(bookmarks, params) {
    var nextPage, page, pageSize, prevPage, radix, totalCount;
    if (params.paging) {
      radix = 10;
      totalCount = parseInt(params.totalCount, radix);
      page = parseInt(params.page, radix);
      pageSize = parseInt(params.pageSize, radix);
      nextPage = totalCount - (page * pageSize) > 0 ? page + 1 : page;
      prevPage = totalCount - (page * pageSize) < pageSize ? page - 1 : page;
      prevPage = prevPage === 0 ? 1 : prevPage;
      return {
        data: {
          totalCount: totalCount || 0,
          currentPage: page || 0,
          pageSize: pageSize || 0,
          pageCount: Math.ceil(totalCount / pageSize) || 0,
          nextPage: nextPage,
          prevPage: prevPage,
          pageFilter: params.filter
        },
        embeds: {
          bookmarks: _.map(bookmarks, function(bookmark) {
            return bookmark.toObject();
          })
        }
      };
    } else {
      return {
        embeds: {
          bookmarks: _.map(bookmarks, function(bookmark) {
            return bookmark.toObject();
          })
        }
      };
    }
  };

  return BookmarkService;

})();

module.exports.BookmarkService = BookmarkService;

monitorConn = function(conn) {
  conn.on('error', function(err) {
    return console.error("" + MODID + " ERROR conn :", err);
  });
  conn.on('connected', function() {
    return console.log("" + MODID + ": connected via mongoose.");
  });
  conn.on('disconnected', function() {
    return console.warn("" + MODID + ": disconnected via mongoose.");
  });
  return process.on('SIGINT', function() {
    return conn.connection.close(function() {
      console.log("" + MODID + ": closed via SIGINT");
      return process.exit(0);
    });
  });
};
